defaultNamespace: dns
helm:
  releaseName: blocky
  chart: blocky
  repo: https://k8s-at-home.com/charts/
  values:
    config: >
      upstream:
        # these external DNS resolvers will be used. Blocky picks 2 random resolvers from the list for each query
        # format for resolver: [net:]host:[port][/path]. net could be empty (default, shortcut for tcp+udp), tcp+udp, tcp, udp, tcp-tls or https (DoH). If port is empty, default port will be used (53 for udp and tcp, 853 for tcp-tls, 443 for https (Doh))
        default:
        - 1.1.1.1
        - 9.9.9.9

      # optional: custom IP address for domain name (with all sub-domains)

      # example: query "printer.lan" or "my.printer.lan" will return 192.168.178.3

      customDNS:
        mapping:
          service.marms: 192.168.50.4

      # optional: definition, which DNS resolver(s) should be used for queries to the domain (with all sub-domains). Multiple resolvers must be separated by comma

      # Example: Query client.fritz.box will ask DNS server 192.168.178.1. This is necessary for local network, to resolve clients by host name

      conditional:
        mapping: {}

      # optional: use black and white lists to block queries (for example ads, trackers, adult pages etc.)

      blocking:
        # definition of blacklist groups. Can be external link (http/https) or local file
        blackLists:
          ads:
            - https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts
            - https://raw.githubusercontent.com/imkarthikk/pihole-facebook/master/pihole-facebook.txt
          special:
            - https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews/hosts
        # definition of whitelist groups. Attention: if the same group has black and whitelists, whitelists will be used to disable particular blacklist entries. If a group has only whitelist entries -> this means only domains from this list are allowed, all other domains will be blocked
        whiteLists:
          ads: []
        # definition: which groups should be applied for which client
        clientGroupsBlock:
          # default will be used, if no special definition for a client name exists
          default:
            - ads
            - special
        # which response will be sent, if query is blocked:
        # zeroIp: 0.0.0.0 will be returned (default)
        # nxDomain: return NXDOMAIN as return code
        # comma separated list of destination IP adresses (for example: 192.100.100.15, 2001:0db8:85a3:08d3:1319:8a2e:0370:7344). Should contain ipv4 and ipv6 to cover all query types. Useful with running web server on this address to display the "blocked" page.
        blockType: zeroIp
        # optional: automatically list refresh period in minutes. Default: 4h.
        # Negative value -> deactivate automatically refresh.
        # 0 value -> use default
        refreshPeriod: 0

      # optional: configuration for caching of DNS responses

      caching:
        # amount in minutes, how long a response must be cached (min value).
        # If <=0, use response's TTL, if >0 use this value, if TTL is smaller
        # Default: 0
        minTime: 5
        # amount in minutes, how long a response must be cached (max value).
        # If <0, do not cache responses
        # If 0, use TTL
        # If > 0, use this value, if TTL is greater
        # Default: 0
        maxTime: -1
        # if true, will preload DNS results for often used queries (names queried more than 5 times in a 2 hour time window)
        # this improves the response time for often used queries, but significantly increases external traffic
        # default: false
        prefetching: true

      # optional: configuration of client name resolution

      clientLookup:
        # optional: this DNS resolver will be used to perform reverse DNS lookup (typically local router)
        upstream: udp:192.168.50.1
        # optional: custom mapping of client name to IP addresses. Useful if reverse DNS does not work properly or just to have custom client names.
        clients: {}

      # optional: configuration for prometheus metrics endpoint

      # prometheus:
      #   # enabled if true
      #   enable: true
      #   # url path, optional (default '/metrics')
      #   path: /metrics

      # optional: write query information (question, answer, client, duration etc)
      to daily csv file

      # queryLog:
      #   # directory (should be mounted as volume in docker)
      #   dir: /logs
      #   # if true, write one file per client. Writes all queries to single file otherwise
      #   perClient: true
      #   # if > 0, deletes log files which are older than ... days
      #   logRetentionDays: 7


      # optional: DNS listener port and bind ip address, default 53 (UDP and TCP). Example: 53, :53, 127.0.0.1:53

      port: 53

      # optional: HTTP listener port, default 0 = no http listener. If > 0, will be used for prometheus metrics, pprof, REST API, DoH ...

      httpPort: 4000

      # optional: HTTPS listener port, default 0 = no http listener. If > 0, will be used for prometheus metrics, pprof, REST API, DoH...

      #httpsPort: 443

      # mandatory, if https port > 0: path to cert and key file for SSL encryption

      #httpsCertFile: server.crt

      #httpsKeyFile: server.key

      # optional: use this DNS server to resolve blacklist urls and upstream DNS servers (DOH). Useful if no DNS resolver is configured and blocky needs to resolve a host name. Format net:IP:port, net must be udp or tcp

      bootstrapDns: tcp:1.1.1.1

      # optional: Log level (one from debug, info, warn, error). Default: info

      logLevel: info

      # optional: Log format (text or json). Default: text

      logFormat: text
    controller:
      replicas: 1
      strategy: RollingUpdate
    env:
      TZ: UTC
    image:
      pullPolicy: IfNotPresent
      repository: spx01/blocky
      tag: v0.15
    metrics:
      enabled: false
      prometheusRule:
        enabled: false
        labels: {}
        rules: []
      serviceMonitor:
        interval: 30s
        labels: {}
        scrapeTimeout: 10s
    persistence:
      logs:
        enabled: false
        mountPath: /logs
    service:
      dns-tcp:
        enabled: true
        externalTrafficPolicy: Local
        ports:
          dns-tcp:
            enabled: true
            port: 53
            protocol: TCP
            targetPort: 53
        type: ClusterIP
      dns-udp:
        enabled: true
        externalTrafficPolicy: Local
        ports:
          dns-udp:
            enabled: true
            port: 53
            protocol: UDP
            targetPort: 53
        type: ClusterIP
      main:
        ports:
          http:
            port: 4000
kustomize:
  dir: overlays